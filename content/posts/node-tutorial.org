#+title: Node.js入门
#+date: 2021-04-24T08:50:00+08:00

* 简介
#+begin_quote
Node.js是一个基于V8引擎的JavaScript运行时环境。
#+end_quote

* Javascript引擎
** Web页面的渲染过程及js引擎的作用

** 为什么需要js引擎?
事实上我们编写的javascrpt(无论是浏览器还是node)的执行最后都是要被CPU执行的，但是CPU支持机器语言，所以需要js引擎来将js代码翻译成CPU指令

** V8引擎
V8是Google开源的高性能JavaScript和WebAssembly引擎，是使用C++编写的，主要用于Chrome和Nodejs中，它实现了ECMAScript和WebAssembly。V8也可以独立运行或嵌入到C++程序中。

** V8的组成
- Parse模块将js代码转换成AST
如果函数没有被调用，是不会被转换成AST的
- Ignition是一个解释器，会将AST转换成ByteCode(字节码)
如果函数值调用一次，Ignition会执行编译执行ByteCode
- TurboFan是一个编译器，可以将字节码编译为CPU可以直接执行的机器码
如果一个函数被多次执行那么就会被标记为热点函数，那么会经过TurboFan转换为机器码，以提高性能

但如果函数在执行的过程中类型发生变化(如参数类型发生了变化),机器码会被还原成ByteCode，随意要尽量保证函数的类型不变
- Orinoco负责垃圾回收

* libuv
libuv提供了事件循环、文件系统读写、网络IO、线程池等等内容
* 模块机制
ES6之前出现了JS模块加载的法案，最主要是CommonJS和AMD规范。CommonJS前者主要应用于服务器，实现同步加载，如nodejs。AMD规范应用于浏览器，如requirejs,为异步加载。

**  require与import区别
node编程中最重要的思想是模块化，require和import都是被模块化使用
- require是 *CommonJS* 规范写法, 而import是 *ES modules* 的写法
- *require是运行时调用* 可以随处引入, *import是编译时调用* 必须放在文件开头引入
- require是 *赋值* 过程，把require的结果(默认是export的一个对象)赋给某个变量, import是解构过程（需要谁，加载谁）

** require加载机制
模块在第一次引入时会执行一次
模块被多次引入时会缓存


* 事件循环
** 阻塞IO与非阻塞IO
- 阻塞式调用: 调用结果返回之前，当前线程处于阻塞态,调用线程只有在得到调用结果之后才会继续执行
- 非阻塞调用: 调用执行之后当前线程不会停止执行，只需要每隔一段时间来检查一下有没有返回结果

** 阻塞和非阻塞，与同步和异步的区别
- 阻塞和非阻塞是对于调用者来说的
- 同步和异步关注的是消息通信机制, 同步和异步是对于调用者来说的。

** 同步/异步 与 阻塞/非阻塞的组合方式
故事：老王烧开水

出场人物：老王，两把水壶(水壶，响水壶)

*** 同步阻塞: 效率是最低的，实际程序中，就是fd未设置O_NONBLOCK 标志位的read/write操作。
老王用水壶烧水，并且站在那里(阻塞)，不管水开没开，每隔一定时间看看水开了没(同步->轮询)。
*** 同步非阻塞: 实际上效率是低下的，注意对fd设置O_NONBLOCK 标志位。
老王用水壶烧水，不再傻傻的站在那里，跑去做别的事情(非阻塞)，但是还是会每个一段时间过来看看水开了没，没开就继续去做的事情(同步->轮询)。
*** 异步阻塞: 异步操作是可以被阻塞住的，只不过它不是在处理消息时阻塞，而是在等待消息时被阻塞。比如select函数，假如传入的最后一个timeout函数为NULL,那么如果所关注的事件没有一个被触发，程序就会一直阻塞在select调用处。
老王用响水壶烧水，站在那里(阻塞)，但是不再去看水开了没，而是等水开了，水壶会自动通知它(异步，内核通知进程)。
*** 异步非阻塞: 效率更高，注册一个回调函数，就可以去做别的事情。
老王用响水壶烧水。跑去做别的事情(非阻塞)，等待响水壶烧开水自动通知它(异步，内核通知进程)

** 任务队列
浏览器中有两个任务队列：微任务和宏任务，执行过程为 所有主代码 => 微任务队列里所有任务 => 执行一条宏任务 => 微任务队列里所有微任务 ....
但nodejs中的任务队列不止两个

*** 宏任务(nodejs一次完成的事件循环tick)
- 定时器(timers)
执行已经被setTimeout()和setInterval()调度的回调函数
- 待定回调(pending callback)
对某些系统操作(如TCP错误类型)执行回调,比如TCP连接时收到ECONNREFUSED
- idle, prepare
仅系统内部使用
- 轮训(poll)
检索新的I/O事件，执行I/O相关回调
- 检测
setImmediate()回调函数在这里执行
- 关闭的回调函数
一些关闭的回调函数，如:socket.on('close', ...)

*** 微任务
Promise.then queueMicrotask
process.nextTick

*** 执行顺序
- 宏任务
1. next tick queue: process.nextTick
2. other queue: Promise的then回调、queueMicrotask;

- 微任务
1. timer queue: setTimeout、setInterval
2. poll queue: I/O事件
3. check queue: setImmediate
4. close queue: close事件

* 内存泄露

* 垃圾回收
#+begin_quote
对于nodejs来说只能使用系统的一部分内存(64位系统为1.4G，32位系统位0.7G)。这是因为nodejs是基于v8的，nodejs是通过v8管理内存的。那v8为什么要限制堆内存的大小呢？

1. 表层原因：v8是为浏览器设计的，不大可能遇到大内存的情景。
2. 深层原因：v8垃圾回收机制的限制。以1.5G的堆内存为例，v8做一次小的垃圾回收需要50ms，做一次非增量的垃圾回收要1s。垃圾回收时会引起js的线程的暂停，在这样的时间花销下，应用的性能、响应能力会直线下降。
#+end_quote

** 内存限制是可以打开的
--max-new-space-size(新生代)
--max-old-space-size(老生代)
v8堆内存大小 = 新生代 + 老生代

** 新生代垃圾回收算法(Scavenge算法)
是一种用牺牲空间来换取时间的算法，内存一分为二(from和to),对象先分配到from,垃圾回收时会检查from中的对象是否存活，如果存活的话就复制到to中。

1. 如果From空间中的对象已经经过Scavenge回收，则转入老生代空间。
2. 如果To空间已经使用了25%，则From空间中的对象进入老生代空间。

** 老生代垃圾回收算法(Mark-Sweep &Mark-Compact算法)
Mark-Sweep:标记清除算法，当运行是分为标记和清除两个阶段。它不将空间对半划分，所以不会有浪费空间的行为。它会遍历堆中的对象，标记活着的对象。在后面的清除中，只清除没有标记的对象。

该算法的问题时，会产生较多的垃圾碎片。

为了解决该问题，Mark-Compact算法被提出来了。它在遍历堆中对象时，会把活着的对象往一端移动。移动结束后，移除边界外的对象。

** 三种算法比较
| 回收算法     | Mark-Sweep | Mark-Compact | Scavenge        |
|--------------+------------+--------------+-----------------|
| 速度         | 中等       | 最慢         | 最快            |
| 空间开销     | 少 有碎片  | 少 无碎片    | 双倍空间 无碎片 |
| 是否移动对象 | 否         | 是           | 是              |

* 闭包
https://blog.csdn.net/u010365819/article/details/81331728
* koa
